{
	"info": {
		"_postman_id": "e9c5e118-ced5-41fd-be5c-52340c90b904",
		"name": "Secret Santa Bot Copy",
		"description": "This collection helps initiate a Secret Santa gift exchange through a specified slack channel for a particular budget. It also gives gift recommendations based on the interest of the person you were assigned.\n\n**Setup**\n\nTo run this collection locally, you will need an environment with the following variables:\n\n1. `budget` : denotes the spending cap for all participants in the gift exchange in numbers\n2. `channel`: denotes the Slack channel name whose members will be participating in Secret Santa\n3. `amazonUrl`: denotes the Amazon base url for your region\n4. `botToken`: denotes the token of the bot user created in [Slack](https://slack.com/intl/en-in/help/articles/115005265703-create-a-bot-for-your-workspace)\n5. `googleClientId`, `googleClientSecret` :  specifies your Google API Oauth Client credentials that need to be [generated](https://accounts.google.com/signin/v2/identifier?service=cloudconsole&passive=1209600&osid=1&continue=https%3A%2F%2Fconsole.cloud.google.com%2Fapis%2Fcredentials%3Fref%3Dhttps%3A%2F%2Fwww.google.com%2F&followup=https%3A%2F%2Fconsole.cloud.google.com%2Fapis%2Fcredentials%3Fref%3Dhttps%3A%2F%2Fwww.google.com%2F&flowName=GlifWebSignIn&flowEntry=ServiceLogin)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get channel Id from slack channel",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = (responseCode.code === 200);",
							"",
							"const res = JSON.parse(responseBody);",
							"let channel = pm.environment.get('channel');",
							"let channelId;",
							"let users;",
							"",
							"res.channels.forEach(ch => {",
							"    if(ch.name === channel) {",
							"        users = ch.members;",
							"        channelId = ch.id;",
							"        console.log('Users: '+users);",
							"    }",
							"});",
							"",
							"pm.environment.set('channelId',channelId);",
							"pm.environment.set('userEmails','[]');",
							"",
							"let xmasEve = new Date(new Date(Date.now()).getFullYear(),11,24,11,30);",
							"let workingDay = xmasEve;",
							"if(xmasEve.getDay() === 0 || xmasEve.getDay() === 6) {",
							"    workingDay = new Date(new Date(Date.now()).getFullYear(),11,26);",
							"}",
							"pm.environment.set('eventDate',workingDay.getTime());",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{botToken}}"
					}
				],
				"url": {
					"raw": "https://slack.com/api/channels.list",
					"protocol": "https",
					"host": [
						"slack",
						"com"
					],
					"path": [
						"api",
						"channels.list"
					]
				},
				"description": "API to list all channels from Slack"
			},
			"response": []
		},
		{
			"name": "Get user Ids from Slack channel",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = (responseCode.code === 200);",
							"",
							"const res = JSON.parse(responseBody);",
							"let users = res.channel.members;",
							"",
							"pm.environment.set('users',JSON.stringify(users));",
							"",
							"if(users.length < 2) {",
							"    console.log('Require atleast 2 users to participate!');",
							"    postman.setNextRequest(null);",
							"}",
							"else {",
							"    let primeNumberList = [3109,3119,3121,3137,3163];",
							"    let randomInt = getRandomInt(primeNumberList.length);",
							"    pm.environment.set('count',users.length);",
							"    let pair = {};",
							"    users.forEach((u,i)=>{",
							"        // pair[u] = users[(i+839)%users.length];",
							"        pair[u] = users[(i+primeNumberList[randomInt])%users.length];",
							"    });",
							"    pm.environment.set('pair',JSON.stringify(pair));",
							"}",
							"",
							"function getRandomInt(max) {",
							"  return Math.floor(Math.random() * Math.floor(max));",
							"}",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{botToken}}"
					}
				],
				"url": {
					"raw": "https://slack.com/api/channels.info?channel={{channelId}}",
					"protocol": "https",
					"host": [
						"slack",
						"com"
					],
					"path": [
						"api",
						"channels.info"
					],
					"query": [
						{
							"key": "channel",
							"value": "{{channelId}}"
						}
					]
				},
				"description": "API to fetch Ids of all members in the Slack channel"
			},
			"response": []
		},
		{
			"name": "Post to slack channel",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = (responseCode.code === 200);",
							"",
							"pm.environment.set('userEmails','[]');",
							"pm.environment.unset('data');"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							"let reqData = {",
							"    \"channel\": pm.environment.get('channel'),",
							"\t\"blocks\": [",
							"\t\t{",
							"\t\t\t\"type\": \"section\",",
							"\t\t\t\"text\": {",
							"\t\t\t\t\"type\": \"mrkdwn\",",
							"\t\t\t\t\"text\": \"*Ho Ho ho :santa: !* \\nI am SecretSanta!\\n I can help you organize a Secret Santa gift exchange in your Slack channel\"",
							"\t\t\t}",
							"\t\t},",
							"\t\t{",
							"\t\t\t\"type\": \"section\",",
							"\t\t\t\"text\": {",
							"\t\t\t\t\"type\": \"mrkdwn\",",
							"\t\t\t\t\"text\": \"Budget for the gift exchange is under Rs. \"+pm.environment.get('budget')",
							"\t\t\t}",
							"\t\t},",
							"\t\t{",
							"\t\t\t\"type\": \"section\",",
							"\t\t\t\"text\": {",
							"\t\t\t\t\"type\": \"mrkdwn\",",
							"\t\t\t\t\"text\": \"Gift exchange is scheduled for: \"+new Date(parseInt(pm.environment.get('eventDate')))",
							"\t\t\t}",
							"\t\t}",
							"\t]",
							"}",
							"pm.environment.set('data',JSON.stringify(reqData));"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{botToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{data}}"
				},
				"url": {
					"raw": "https://slack.com/api/chat.postMessage",
					"protocol": "https",
					"host": [
						"slack",
						"com"
					],
					"path": [
						"api",
						"chat.postMessage"
					]
				},
				"description": "API to post an introductory message to the slack channel"
			},
			"response": []
		},
		{
			"name": "Get user email from slack",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = (responseCode.code === 200);",
							"",
							"const res = JSON.parse(responseBody);",
							"let userEmails = JSON.parse(pm.environment.get('userEmails'));",
							"let count = pm.environment.get('count');",
							"count--;",
							"pm.environment.set('count',count);",
							"if(count>=0) {",
							"    userEmails.push(res.user.profile.email);",
							"    pm.environment.set('userEmails',JSON.stringify(userEmails));",
							"    let count = pm.environment.get('count');",
							"    count--;",
							"    postman.setNextRequest('Get user email from slack');",
							"}",
							"else {",
							"    pm.environment.set('count',userEmails.length);",
							"    postman.setNextRequest('Prompt slack user to input interests');",
							"}",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let users = JSON.parse(pm.environment.get('users'));",
							"let count = pm.environment.get('count');",
							"if(count>0) {",
							"    pm.environment.set('userId',users[count-1]);",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{botToken}}"
					}
				],
				"url": {
					"raw": "https://slack.com/api/users.info?user={{userId}}",
					"protocol": "https",
					"host": [
						"slack",
						"com"
					],
					"path": [
						"api",
						"users.info"
					],
					"query": [
						{
							"key": "user",
							"value": "{{userId}}"
						}
					]
				},
				"description": "API to fetch email ids of a user from Slack"
			},
			"response": []
		},
		{
			"name": "Prompt slack user to input interests",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = (responseCode.code === 200);",
							"",
							"let count = pm.environment.get('count');",
							"if(count) {",
							"    postman.setNextRequest('Prompt slack user to input interests');",
							"}",
							"else {",
							"    setTimeout(function(){}, 10000);",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let users = JSON.parse(pm.environment.get('users'));",
							"let count = pm.environment.get('count');",
							"if(count) {",
							"    count--;",
							"    pm.environment.set('count',count);",
							"    let currentUser = users[users.length-count-1];",
							"    let reqData = {",
							"    \"channel\": currentUser,",
							"    \"text\": `Hey <@${currentUser}>! \\nWelcome to Secret Santa!\\n Please use the /secretsanta command to input your interests!\\nExample: /secretsanta books`",
							"};",
							"pm.environment.set('data',JSON.stringify(reqData));",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{botToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{data}}"
				},
				"url": {
					"raw": "https://slack.com/api/chat.postMessage",
					"protocol": "https",
					"host": [
						"slack",
						"com"
					],
					"path": [
						"api",
						"chat.postMessage"
					]
				},
				"description": "API to post message to slack user to prompt use of slash command, /secretsanta, to input their interest."
			},
			"response": []
		},
		{
			"name": "Get all user interests from app",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = (responseCode.code === 200);",
							"",
							"pm.environment.set('userInterest',responseBody);",
							"pm.environment.set('count',JSON.parse(pm.environment.get('users')).length);",
							"pm.environment.set('userProduct','{}');"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://secretsantatest.herokuapp.com/slack",
					"protocol": "https",
					"host": [
						"secretsantatest",
						"herokuapp",
						"com"
					],
					"path": [
						"slack"
					]
				},
				"description": "API to fetch the stored interests for all users"
			},
			"response": []
		},
		{
			"name": "Get Amazon product links for a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = (responseCode.code === 200);",
							"",
							"let ch = require('cheerio');",
							"let html = ch(pm.response.text());",
							"",
							"let results = html.find('.s-result-item');",
							"let productUrls = [];",
							"let productTitles = [];",
							"let countProd = 3;",
							"results.each(function(i, result){",
							"",
							"    if(ch(result).find('.s-sponsored-feedback').length === 0){",
							"        countProd--;",
							"        let url = ch(ch(result).find('a.a-link-normal')).attr('href');",
							"        productUrls.push(pm.environment.get('amazonUrl')+url);",
							"        productTitles.push(ch(ch(result).find('span.a-color-base.a-text-normal')).text());",
							"        if(!countProd) {",
							"            return false;",
							"        }",
							"    }",
							"});",
							"let userProduct = JSON.parse(pm.environment.get('userProduct'));",
							"userProduct[pm.environment.get('currentUser')] = {",
							"    productUrls: productUrls,",
							"    productTitles: productTitles",
							"}",
							"pm.environment.set('userProduct',JSON.stringify(userProduct));",
							"let count = pm.environment.get('count');",
							"if(count) {",
							"    postman.setNextRequest('Get Amazon product links for a user');",
							"}",
							"else {",
							"    postman.setNextRequest('Post recomendations to slack');",
							"    pm.environment.set('count',JSON.parse(pm.environment.get('users')).length);",
							"}",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let users = JSON.parse(pm.environment.get('users'));",
							"let count = pm.environment.get('count');",
							"let userInterest = JSON.parse(pm.environment.get('userInterest'));",
							"if(count) {",
							"    count--;",
							"    pm.environment.set('count',count);",
							"    let currentUser = users[users.length-count-1];",
							"    pm.environment.set('currentUser',currentUser);",
							"    pm.environment.set('category',userInterest[currentUser] || 'gifts');",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{amazonUrl}}/s?k={{category}}+under+{{budget}}&ref=nb_sb_noss_1",
					"host": [
						"{{amazonUrl}}"
					],
					"path": [
						"s"
					],
					"query": [
						{
							"key": "k",
							"value": "{{category}}+under+{{budget}}"
						},
						{
							"key": "ref",
							"value": "nb_sb_noss_1"
						}
					]
				},
				"description": "API to fetch product links and titles from Amazon for a particular budget and interest"
			},
			"response": []
		},
		{
			"name": "Post recomendations to slack",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = (responseCode.code === 200);",
							"",
							"let count = pm.environment.get('count');",
							"if(count) {",
							"    postman.setNextRequest('Post recomendations to slack');",
							"}",
							"else {",
							"    pm.environment.set('count',JSON.parse(pm.environment.get('users')).length);",
							"    postman.setNextRequest('Create Google calendar invite');",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							"let pair = JSON.parse(pm.environment.get('pair'));",
							"let users = JSON.parse(pm.environment.get('users'));",
							"let count = pm.environment.get('count');",
							"if(count) {",
							"    count--;",
							"    pm.environment.set('count',count);",
							"    let currentUser = users[users.length-count-1];",
							"    let userProduct = JSON.parse(pm.environment.get('userProduct'));",
							"    ",
							"    let titles = userProduct[pair[currentUser]]['productTitles'];",
							"    let urls = userProduct[pair[currentUser]]['productUrls'];",
							"    let reqData = {",
							"    \"channel\": currentUser,",
							"    \"text\": `Hey <@${currentUser}>! You have been assigned to <@${pair[currentUser]}>\\nHere are some gift ideas for you under Rs. ${pm.environment.get('budget')} based on your friend's interests!`,",
							"    \"attachments\": [",
							"        {",
							"            \"title\":titles[0],",
							"            \"title_link\":urls[0],",
							"            \"color\": \"#764FA5\"",
							"        },",
							"        {",
							"            \"title\":titles[1],",
							"            \"title_link\":urls[1],",
							"            \"color\": \"#764FA5\"",
							"        },",
							"        {",
							"            \"title\":titles[2],",
							"            \"title_link\":urls[2],",
							"            \"color\": \"#764FA5\"",
							"        }",
							"    ]",
							"};",
							"pm.environment.set('data',JSON.stringify(reqData));",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{botToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{data}}"
				},
				"url": {
					"raw": "https://slack.com/api/chat.postMessage",
					"protocol": "https",
					"host": [
						"slack",
						"com"
					],
					"path": [
						"api",
						"chat.postMessage"
					]
				},
				"description": "API to post information regarding which user has been assigned to him and gift recommendations based on their interest to a Slack user "
			},
			"response": []
		},
		{
			"name": "Create Google calendar invite",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = (responseCode.code === 200);",
							"",
							"if (responseCode.code !== 200) {",
							"    postman.setNextRequest(null)",
							"}",
							"else {",
							"    pm.environment.unset('payload');",
							"pm.environment.unset('userEmails');",
							"pm.environment.unset('users');",
							"pm.environment.unset('data');",
							"pm.environment.unset('channelId');",
							"pm.environment.unset('pair');",
							"pm.environment.unset('userInterest');",
							"pm.environment.unset('currentUser');",
							"pm.environment.unset('userId');",
							"pm.environment.unset('userProduct');",
							"pm.environment.unset('count');",
							"pm.environment.unset('payload');",
							"pm.environment.unset('eventDate');",
							"pm.environment.unset('category');",
							"}",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let eventDate = parseInt(pm.environment.get('eventDate'));",
							"let userEmails = JSON.parse(pm.environment.get('userEmails'));",
							"userEmails = userEmails.map(em=> {",
							"    return {",
							"        email: em",
							"    }",
							"});",
							"let payload = {",
							"    summary: 'Secret Santa!',",
							"    description: 'Secret Santa gift exchange',",
							"    colorId: \"9\",",
							"    start: {",
							"        dateTime: new Date(eventDate)",
							"    },",
							"    end: {",
							"        dateTime: new Date(eventDate +30*60000)",
							"    },",
							"    attendees: userEmails",
							"}",
							"pm.environment.set('payload',JSON.stringify(payload));",
							"",
							"",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "ya29.ImSpBxyOyGItDFCzI0-5jE2nXydkgChrrHdc_45TspXlBsYexm8SbJvPgjV_5XSr8uzeC_6aD3jWCb3g126e4cVuv5EQgrY7PrNkzuvf2RIw0NRMZcezCJ61l-fgBrPs3J-Do7j4",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "Bearer",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{payload}}"
				},
				"url": {
					"raw": "https://www.googleapis.com/calendar/v3/calendars/primary/events",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"calendar",
						"v3",
						"calendars",
						"primary",
						"events"
					]
				},
				"description": "API to create a Google Calendar invite including all participants for the gift exchange"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}